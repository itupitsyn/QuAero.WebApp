// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  login         String    @unique @db.VarChar(128)
  password      String    @db.VarChar(128)
  name          String?   @db.VarChar(128)
  email         String?   @unique @db.VarChar(128)
  emailVerified DateTime?
  image         String?
  sessions      Session[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Permission Permission[]
  Membership Membership[]
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermissionSRT {
  id           String            @id @default(cuid())
  srt          SearchRescueTeam? @relation(fields: [srtId], references: [id], onDelete: Cascade)
  srtId        String
  permission   Permission?       @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  permission String
  allowed    Boolean

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PermissionSRT PermissionSRT[]

  @@unique([userId, permission])
}

model SearchRescueTeam {
  id   String @id @default(cuid())
  name String @unique

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PermissionSRT PermissionSRT[]
  Membership    Membership[]
}

model Membership {
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  srt    SearchRescueTeam @relation(fields: [srtId], references: [id], onDelete: Cascade)
  srtId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, srtId])
}
